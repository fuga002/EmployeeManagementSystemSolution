@implements IDisposable
@if (AllState.ShowCountry)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                <div class="card-header" >
                    <h4 class="float-start">Countries </h4>
                    <button class="btn btn-outline-success float-end" @onclick="@AddButtonClicked">
                        <i class="bi bi-plus-circle-dotted">Add Country</i>
                    </button>
                </div>
                <div class="card-header" style="max-height:580px; overflow-x: hidden; overflow-y: scroll;">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Id</th>
                                <th scope="col">Country</th>
                                <th scope="col">Action</th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (Countries is not null)
                            {
                                int count = 1;
                                foreach (var item in Countries)
                                {
                                    <tr>
                                        <th scope="row">@count</th>
                                        <td >@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>
                                            <i class="bi bi-pencil text-info" id="cursorStyle"
                                               @onclick="() => EditClicked(item)"></i>
                                            <i class="bi bi-trash text-danger " id="cursorStyle"
                                               @onclick="() => DeleteClicked(item)"></i>

                                        </td>
                                    </tr>
                                    count++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4">
                                        <div class="alert alert-info text-center">No Country add yet!</div>
                                        </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>
}
<CountryDialog @ref="CountryDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent" 
                         Country="Country" />



<style>
    .cursorStyle{
        cursor : pointer;
    }
</style>

@code
{
    Country Country { get; set; } = new();
    CountryDialog? CountryDialog { get; set; }
    public List<Country>? Countries { get; set; } = new();
    public string Title { get; set; } = "Add";
    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        AllState.Action += StateHasChanged; 
    }
    void AddButtonClicked()
    {
        CountryDialog.ChangeTitle("Add");
        Country = new();
        OpenDialog();
    }
    private async Task GetCountries()
    {
        Countries = await CountryService.GetAll(Constants.CountryBaseUrl);
    }

    void OpenDialog()
    {
        CountryDialog?.OpenDialog();
    }
    
    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }

    private async Task HandleSaveOperationEvent(Country country)
    {
        bool successCheck = false;
        if (country.Id > 0)
        {
            var result = await CountryService.Update(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await CountryService.Inset(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            Country = new();
            await GetCountries();
            CountryDialog?.ChangeTitle("Add");
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await DialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await DialogService.AlertAsync(message, "Alert");
            return false;
        }
    }

    private void EditClicked(Country country)
    {
        CountryDialog?.ChangeTitle("Update");
        Country = country;
        OpenDialog();
    }

    private async Task DeleteClicked(Country country)
    {
        bool confirm = await DialogService.ConfirmAsync($"Are you sure you wanna delete {country.Name}?", "Confirm Delete");
        if (!confirm) return;

        var  response = await CountryService.DeleteById(country.Id, Constants.CountryBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetCountries();
    }
}
