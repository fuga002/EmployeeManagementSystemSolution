@implements IDisposable
@if (AllState.ShowCity)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card-header">
                    <h4 class="float-start">Cities</h4>
                    <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                        <i class="bi bi-plus-circle-dotted">Add City</i>
                    </button>
                </div>
                <div class="card-header" style="max-height:580px; overflow-x: hidden; overflow-y: scroll;">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">City</th>
                                    <th scope="col">City</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Cities is not null )
                                {
                                    int count = 1;
                                    foreach (var item in Cities)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Country?.Name</td> 
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info" id="cursorStyle"
                                                   @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle"
                                                   @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5"><div class="alert alert-info text-center">No City added yet!</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<CityDialog @ref="CityDialog"
                  HandleSaveOperationEvent="HandleSaveOperationEvent"
                  City="City"
                  Countries="Countries"/>

@code {
    public string Title { get; set; } = "Add";
    CityDialog CityDialog;
    City City = new();
    public List<Country> Countries { get; set; } = new();
    public List<City> Cities { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        AllState.Action += StateHasChanged;
    }

    private async Task GetCities()
    {
            Cities = await CityService.GetAll(Constants.CityBaseUrl);
    }

    private async Task GetCountries()
    {
            Countries = await CountryService.GetAll(Constants.CountryBaseUrl);
    }

    void AddButtonClicked()
    {
        CityDialog.ChangeTitle("Add");
        City = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        CityDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent()
    {
        bool successCheck = false;
        if (City.Id > 0)
        {
            var result = await CityService.Update(City, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await CityService.Inset(City, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            City = new();
            await GetCities();
            CityDialog?.ChangeTitle("Add");
        }
    }

    private async Task DeleteClicked(City dep)
    {
        bool confirm = await DialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await CityService.DeleteById(dep.Id, Constants.CityBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetCities();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await DialogService.AlertAsync(message, "Success Operation");
            return false;
        }
        else
        {
            await DialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    private void EditClicked(City dep)
    {
        CityDialog?.ChangeTitle("Update");
        City = dep;
        OpenDialog();
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
}